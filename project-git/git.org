#+title: Git Worshop
#+AUTHOR: Adithya Nair
* Starting With Some Motivation
# Insert Picture Of WhatsApp Message Of Code
# Insert Picture Of Multiple "Final" Filenames.
** The Problems Git Solves
Version control solves two main problems.
1. You can confidently move forward in your projects, if you have saved states that you have annotated.
2. You can confidently work in teams, making changes to the projects independently.
** Usage In Industries
** A Note
* How Git Works
#+begin_quote
"When you do actions in Git, nearly all of them only add data to the Git database. It is hard to get the system to do anything that is not undoable or to make it erase data in any way." from Pro Git.
#+end_quote
** The Three States
# Try adding into [[Commands]] section
Git has three main states:
1. Modified
2. Staged
3. Commited
** TODO A Time Machine
** TODO A Glossary
*** Repository
*** Branches
*** Commits
# Commits are a linked list.
*** Stashing
*** Snapshots
** TODO Every Repo Copy Is Self-Contained.
** We Will Be Using The CLI
We will use the CLI only for the purposes of this workshop, and I highly suggest sticking with the CLI until you're familiar enough. Once you learn the CLI, you can use any GUI but you don't really learn the CLI from the GUI.
* Installation
** Linux
#+begin_src shell
sudo <package-manager> install git
#+end_src
** Mac
Mac users usually have it all installed anyway. Check by typing
#+begin_src shell
git --version
# If not installed
brew install git
#+end_src
** Windows
*** TODO Add Git Installation Procedure
* Setup
** Config
Setup your name and email. This is how git commits will be seen, so that we know who is responsible for what work clearly. (This will come in handy with git blame)
#+begin_src shell
git config --global user.name "Adithya Nair"
git config --global user.email "adithyanair121@gmail.com"
#+end_src
Setup your editor of choice
#+begin_src shell
# For VS Code
git config --global core.editor "code --wait"
# For Emacs
git config --global core.editor emacs
# For NeoVim
git config --global core.editor "nvim -f"
#+end_src
You might be wondering why I am adding the `--wait` to vscode, that's because it allows git to wait for a signal from VS Code. This will come in handy when we're trying to use our editor of choice to write commit messages.
* Commands
** Initialize A Repo
#+begin_src shell
git init
#+end_src
** Download A New Repo
Cloning means downloading the entire repository, including the history of the entire project
  #+begin_src shell
git clone <repository-url>
  #+end_src
** Check The Status Of Your Repo
#+begin_src shell
git status
#+end_src
** Adding Files To Be Commited
#+begin_src shell
git add <file-name>
#+end_src
You cannot commit if you don't add them to the staging area, this is how you stage your changes.
** Ignore Files
To make sure git does not track a certain file format, you can add a .gitignore file at the top of your repository. This file contains files and folders you want to ignore, in 'glob' format.
This is useful when you have things that compile that isn't necessary to replicate.
#+begin_src
.gitignore
*.out
#+end_src
** Commit
#+begin_src shell
# Write the message in your preferred editor
git commit
# Write the commit message within the command
git commit -m "Message"
#+end_src
** View Changes
You can use this command to see exactly what you've changed.
#+begin_src shell
git diff
#+end_src
** Rollback Changes
** Create A New Branch
#+begin_src shell
git branch <branch-name>
#+end_src
** Switching To A New Branch
#+begin_src shell
git checkout <branch-name>
# NOTE you can also use this, from git v2.23
git switch <branch-name>
#+end_src
** Merge Branches
#+begin_src shell
git checkout <branch-to-merge-to>
git merge <branch-to-be-merged-with>
#+end_src
** Delete Branches
#+begin_src shell
git branch -d <branch-name>
#+end_src
** Remote Repository Sync
#+begin_src shell
# To download newest changes from repo
git pull
# To sync local changes to remote repo
git push
#+end_src
** Stashing
** Tagging
* Example Workflow
* Community
** Pull Requests
** Discussions
** Putting Up Issues
* References
- [[https://www.youtube.com/watch?v=2sjqTHE0zok][MIT Lecture on Git.]]
- [[https://git-scm.com/book/en/v2][Pro Git, A comprehensive look into git.]]
- [[https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][A note about commit messages]]-


* GITHUB
** Github Education
** Heatmap
** Actions
