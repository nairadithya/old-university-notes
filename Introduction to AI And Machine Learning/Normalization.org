#+begin_src jupyter-python
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
%cd /content/drive/My\ Drive/data-preprocessing/

#+end_src

#+begin_example
Mounted at /content/drive
/content/drive/My Drive/data-preprocessing
#+end_example

*** CREATING A DATAFRAME

#+begin_src jupyter-python
import pandas as pd
import numpy as np

# Load the Titanic dataset
df = pd.read_csv('titanic.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())
print(df.shape)
#+end_src

#+begin_example
First few rows of the dataset:
   PassengerId  Survived  Pclass  \
0            1         0       3   
1            2         1       1   
2            3         1       3   
3            4         1       1   
4            5         0       3   

                                                Name     Sex   Age  SibSp  \
0                            Braund, Mr. Owen Harris    male  22.0      1   
1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   
2                             Heikkinen, Miss. Laina  female  26.0      0   
3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   
4                           Allen, Mr. William Henry    male  35.0      0   

   Parch            Ticket     Fare Cabin Embarked  
0      0         A/5 21171   7.2500   NaN        S  
1      0          PC 17599  71.2833   C85        C  
2      0  STON/O2. 3101282   7.9250   NaN        S  
3      0            113803  53.1000  C123        S  
4      0            373450   8.0500   NaN        S  
(891, 12)
#+end_example

#+begin_src jupyter-python

# Identify missing values
print("\nMissing values in each column:")
print(df.isnull().sum())

#+end_src

#+begin_example

Missing values in each column:
PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64
#+end_example

#+begin_src jupyter-python
##HANDLING MISSING VALUES
#+end_src

#+begin_src jupyter-python
# Handling missing values

# Method 1: Drop rows with missing values
df_dropped = df.dropna()
print("\n METHOD 1 Shape of dataset after dropping rows with missing values:", df_dropped.shape)

# Method 2: Fill missing values with a specific value (e.g., 0)
df_filled_zeros = df.fillna(0)
print("\nMETHOD 2 Missing values filled with 0:")
print(df_filled_zeros.isnull().sum())

#+end_src

#+begin_example

 METHOD 1 Shape of dataset after dropping rows with missing values: (183, 12)

METHOD 2 Missing values filled with 0:
PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          0
Embarked       0
dtype: int64
#+end_example

#+begin_src jupyter-python
# Method 3: Fill missing values with the mean (for numerical columns)
df['Age'].fillna(df['Age'].mean(), inplace=True)
print("\nMETHOD 3 Missing values in 'Age' column after filling with mean:")
print(df['Age'].isnull().sum())

# Method 4: Fill missing values with the most frequent value (mode)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
print("\nMETHOD 4 Missing values in 'Embarked' column after filling with mode:")
print(df['Embarked'].isnull().sum())

#+end_src

#+begin_example

METHOD 3 Missing values in 'Age' column after filling with mean:
0

METHOD 4 Missing values in 'Embarked' column after filling with mode:
0
#+end_example

#+begin_src jupyter-python
# Method 5: Forward fill method
df_ffill = df.fillna(method='ffill')
print("\nMethod 5 Missing values handled using forward fill method:")
print(df_ffill.isnull().sum())

# Method 6: Backward fill method
df_bfill = df.fillna(method='bfill')
print("\nMethod 6 Missing values handled using backward fill method:")
print(df_bfill.isnull().sum())
print("*****************")

#+end_src

#+begin_example

Method 5 Missing values handled using forward fill method:
PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          1
Embarked       0
dtype: int64

Method 6 Missing values handled using backward fill method:
PassengerId    0
Survived       0
Pclass         0
Name           0
Sex            0
Age            0
SibSp          0
Parch          0
Ticket         0
Fare           0
Cabin          1
Embarked       0
dtype: int64
*****************
#+end_example

#+begin_src jupyter-python
#+end_src

#+begin_src jupyter-python
###NORMALIZATION
#+end_src

#+begin_src jupyter-python

####NORMALISING A ASET OF VALUES USING MIN MAX NORMALIZATION
import numpy as np
from sklearn.preprocessing import MinMaxScaler

# Example usage:
data = np.array([2, 5, 8, 11, 14]).reshape(-1, 1)  # Reshape to 2D array for scaler

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Apply Min-Max normalization
normalized_data = scaler.fit_transform(data)

# Flatten the normalized data to 1D array
normalized_data = normalized_data.flatten()

print(normalized_data)
#+end_src

#+begin_example
[0.   0.25 0.5  0.75 1.  ]
#+end_example

#+begin_src jupyter-python
#+end_src

#+begin_src jupyter-python
####NORMALISING A SET OF VALUES USING Z-SCORE NORMALIZATION
import numpy as np
from sklearn.preprocessing import StandardScaler

# Example usage:
data = np.array([2, 5, 8, 11, 14]).reshape(-1, 1)  # Reshape to 2D array for scaler

# Initialize the StandardScaler
scaler = StandardScaler()

# Apply Z-score normalization
normalized_data = scaler.fit_transform(data)

# Flatten the normalized data to 1D array
normalized_data = normalized_data.flatten()

print(normalized_data)
#+end_src

#+begin_example
[-1.41421356 -0.70710678  0.          0.70710678  1.41421356]
#+end_example

#+begin_src jupyter-python
### NORMALIZING CERTAIN COLUMNS IN THE DATAFRAME

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# List of columns to be normalized
columns_to_normalize = ['Age', 'Fare']

# Apply Min-Max normalization
df[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])

print("\nDataFrame after Min-Max normalization:")
print(df)
#+end_src

#+begin_example

DataFrame after Min-Max normalization:
     PassengerId  Survived  Pclass  \
0              1         0       3   
1              2         1       1   
2              3         1       3   
3              4         1       1   
4              5         0       3   
..           ...       ...     ...   
886          887         0       2   
887          888         1       1   
888          889         0       3   
889          890         1       1   
890          891         0       3   

                                                  Name     Sex       Age  \
0                              Braund, Mr. Owen Harris    male  0.271174   
1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  0.472229   
2                               Heikkinen, Miss. Laina  female  0.321438   
3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  0.434531   
4                             Allen, Mr. William Henry    male  0.434531   
..                                                 ...     ...       ...   
886                              Montvila, Rev. Juozas    male  0.334004   
887                       Graham, Miss. Margaret Edith  female  0.233476   
888           Johnston, Miss. Catherine Helen "Carrie"  female  0.367921   
889                              Behr, Mr. Karl Howell    male  0.321438   
890                                Dooley, Mr. Patrick    male  0.396833   

     SibSp  Parch            Ticket      Fare Cabin Embarked  
0        1      0         A/5 21171  0.014151   NaN        S  
1        1      0          PC 17599  0.139136   C85        C  
2        0      0  STON/O2. 3101282  0.015469   NaN        S  
3        1      0            113803  0.103644  C123        S  
4        0      0            373450  0.015713   NaN        S  
..     ...    ...               ...       ...   ...      ...  
886      0      0            211536  0.025374   NaN        S  
887      0      0            112053  0.058556   B42        S  
888      1      2        W./C. 6607  0.045771   NaN        S  
889      0      0            111369  0.058556  C148        C  
890      0      0            370376  0.015127   NaN        Q  

[891 rows x 12 columns]
#+end_example

#+begin_src jupyter-python
#####SAMPLING
#+end_src

#+begin_src jupyter-python
###RANDOM SAMPLING
import random

# Sample data
population = list(range(1, 101))  # Population from 1 to 100
sample_size = 10  # Size of the sample

# Simple random sampling
sample = random.sample(population, sample_size)
print("Simple Random Sample:", sample)
#+end_src

#+begin_example
Simple Random Sample: [1, 67, 16, 43, 82, 71, 92, 30, 9, 100]
#+end_example

#+begin_src jupyter-python
###STRATIFIED SAMPLING

import random

# Sample data with strata
strata_data = {
    'stratum1': [1, 2, 3, 4, 5],
    'stratum2': [6, 7, 8, 9, 10],
}

# Sample size per stratum
sample_size_per_stratum = 2

# Stratified sampling
sample = []
for stratum, data in strata_data.items():
    stratum_sample = random.sample(data, sample_size_per_stratum)
    sample.extend(stratum_sample)

print("Stratified Sample:", sample)
#+end_src

#+begin_example
Stratified Sample: [1, 4, 8, 9]
#+end_example

#+begin_src jupyter-python
# Sample data
data = list(range(1, 101))  # Data from 1 to 100
n = 5  # Every nth data point to be included in the sample

# Systematic sampling
sample = data[::n]
print("Systematic Sample:", sample)
#+end_src

#+begin_example
Systematic Sample: [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96]
#+end_example

#+begin_src jupyter-python
import random

# Sample data with clusters
clusters = {
    'cluster1': [1, 2, 3],
    'cluster2': [4, 5, 6],
    'cluster3': [7, 8, 9],
}

# Number of clusters to sample
clusters_to_sample = 2

# Cluster sampling
selected_clusters = random.sample(list(clusters.keys()), clusters_to_sample)
print("chosen clusters ", selected_clusters)
sample = []
for cluster in selected_clusters:
    sample.extend(clusters[cluster])

print("Cluster Sample:", sample)
#+end_src

#+begin_example
chosen clusters  ['cluster3', 'cluster2']
Cluster Sample: [7, 8, 9, 4, 5, 6]
#+end_example

#+begin_src jupyter-python
####BINNING
#+end_src

#+begin_src jupyter-python
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
%cd /content/drive/My\ Drive/data-preprocessing/
df = pd.read_csv('bollywood.csv')
#+end_src

#+begin_example
Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).
/content/drive/My Drive/data-preprocessing
#+end_example

#+begin_src jupyter-python
import pandas as pd

# Assuming 'df' is your DataFrame containing the dataset
budget_bins = [0, 10, 20, float('inf')]  # Define your budget bins
budget_labels = ['Low Budget', 'Medium Budget', 'High Budget']  # Labels for the bins

df['BudgetBin'] = pd.cut(df['Budget'], bins=budget_bins, labels=budget_labels)
#+end_src

#+begin_src jupyter-python
df.head(10)
#+end_src

#+RESULTS:
#+begin_src jupyter-python

import matplotlib.pyplot as plt
budget_bin_counts = df['BudgetBin'].value_counts()

# Plot the data as a bar chart
plt.figure(figsize=(8, 6))
budget_bin_counts.plot(kind='bar', color='skyblue')
plt.title('Number of Movies in Each Budget Bin')
plt.xlabel('Budget Bin')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()
#+end_src

#+begin_src jupyter-python
collection_bins = [0, 20, 40, 60, float('inf')]  # Define your collection bins
collection_labels = ['Low Collection', 'Medium Collection', 'High Collection', 'Very High Collection']  # Labels for the bins

df['CollectionBin'] = pd.cut(df['BoxOfficeCollection'], bins=collection_bins, labels=collection_labels)
df.head(10)
#+end_src

#+RESULTS:
#+begin_src jupyter-python

import matplotlib.pyplot as plt
budget_bin_counts = df['CollectionBin'].value_counts()

# Plot the data as a bar chart
plt.figure(figsize=(8, 6))
budget_bin_counts.plot(kind='bar', color='skyblue')
plt.title('Number of Movies in Each Budget Bin')
plt.xlabel('Budget Bin')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()
#+end_src

[[file:6d1b533234c55700921c51ec2564d6917a09ab42.png]]
