@article{alharbiDNSPoisoningOperating2022,
  title = {{{DNS Poisoning}} of {{Operating System Caches}}: {{Attacks}} and {{Mitigations}}},
  shorttitle = {{{DNS Poisoning}} of {{Operating System Caches}}},
  author = {Alharbi, Fatemah and Zhou, Yuchen and Qian, Feng and Qian, Zhiyun and {Abu-Ghazaleh}, Nael},
  year = {2022},
  month = jul,
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {4},
  pages = {2851--2863},
  issn = {1941-0018},
  doi = {10.1109/TDSC.2022.3142331},
  urldate = {2024-12-01},
  abstract = {The Domain Name System (DNS) is a protocol supporting name resolution from Fully Qualified Domain Names (FQDNs) to the IP address of the machines corresponding to them. This resolution process is critical to the operation of the Internet, but is susceptible to a range of attacks. One of the most dangerous attack vectors is DNS poisoning where an attacker injects malicious entries into the DNS resolution forcing clients to be redirected from legitimate to malicious servers. Typically, poisoning attacks target a DNS resolver allowing attackers to poison a DNS entry for all machines that use the compromised resolver. However, recent defenses protect resolvers substantially limiting these attacks. In this paper, we present a new class of DNS poisoning attacks targeting the client-side DNS cache, which is used in mainstream operating systems, circumventing defenses protecting resolvers. We implemented the attack on Windows, Mac OS, and Ubuntu Linux machines. We also generalize the attack to work even when the client is behind a Network Address Translation (NAT) router. Our results show that we can reliably inject malicious DNS mappings, with on average, an order of tens of seconds. We also propose client-side mitigations and demonstrate that they can effectively mitigate the vulnerability.},
  keywords = {cache poisoning,Computer crime,DNS,Internet,Linux,mac,microsoft windows,NAT,network security,Operating systems,Protocols,Servers,Toxicology,Ubuntu linux},
  file = {/home/adithya/Zotero/storage/7SUCPD6B/9681241.html}
}

@incollection{aliDNSUsingBIND2015,
  title = {{{DNS Using BIND}} and {{DHCP}}},
  booktitle = {Practical {{Linux Infrastructure}}},
  author = {Ali, Syed},
  editor = {Ali, Syed},
  year = {2015},
  pages = {197--224},
  publisher = {Apress},
  address = {Berkeley, CA},
  doi = {10.1007/978-1-4842-0511-2_8},
  urldate = {2024-11-21},
  abstract = {Domain Name System (DNS) is the backbone of the Internet. Without DNS we would be lost in navigating websites. For many enterprises, choosing a robust DNS solution---one that is easy to manage and able to meet to the needs of the enterprise---can be a challenging task. This chapter focuses on how to design an enterprise-friendly DNS solution using BIND. BIND is an open source DNS implementation that has become the de facto reference implementation (https://www.isc.org/downloads/bind/). BIND stands for Berkeley Internet Name Domain, because the software was developed at the University of California at Berkeley during the early 1980s. Currently, the Internet Systems Consortium (ISC) maintains BIND.},
  isbn = {978-1-4842-0511-2},
  langid = {english}
}

@article{babuComprehensiveAnalysisSpoofing2011,
  title = {A {{Comprehensive Analysis}} of {{Spoofing}}},
  author = {Babu, P. and Bhaskari, Lalitha and {CH.Satyanarayana}},
  year = {2011},
  month = jan,
  journal = {International Journal of Advanced Computer Sciences and Applications},
  doi = {10.14569/IJACSA.2010.010623},
  abstract = {The main intention of writing this paper is to enable the students, computer users and novice researchers about spoofing attacks. Spoofing means impersonating another person or computer, usually by providing false information (E-mail name, URL or IP address). Spoofing can take on many forms in the computer world, all of which involve some type false representation of information. There are a variety of methods and types of spoofing. We would like to introduce and explain following spoofing attacks in this paper: IP, ARP, E-Mail, Web, and DNS spoofing. There are no legal or constructive uses for implementing spoofing of any type. Some of the outcomes might be sport, theft, vindication or some other malicious goal. The magnitude of these attacks can be very severe; can cost us millions of dollars. This Paper describes about various spoofing types and gives a small view on detection and prevention of spoofing attacks.},
  file = {/home/adithya/Zotero/storage/UJ8UZJCD/Babu et al. - 2011 - A Comprehensive Analysis of Spoofing.pdf}
}

@inproceedings{csikorPrivacyDNSoverHTTPSRequiem2021,
  title = {Privacy of {{DNS-over-HTTPS}}: {{Requiem}} for a {{Dream}}?},
  shorttitle = {Privacy of {{DNS-over-HTTPS}}},
  booktitle = {2021 {{IEEE European Symposium}} on {{Security}} and {{Privacy}} ({{EuroS}}\&{{P}})},
  author = {Csikor, Levente and Singh, Himanshu and Kang, Min Suk and Divakaran, Dinil Mon},
  year = {2021},
  month = sep,
  pages = {252--271},
  doi = {10.1109/EuroSP51992.2021.00026},
  urldate = {2024-11-21},
  abstract = {The recently proposed DNS-over-HTTPS (DoH) protocol is becoming increasingly popular in addressing the privacy concerns of exchanging plain-text DNS messages over potentially malicious transit networks (e.g., mass surveillance at ISPs). By employing HTTPS to encrypt DNS communications, DoH traffic inherently becomes indistinguishable from regular encrypted Web traffic, rendering active disruption (e.g., downgrading to the plain-text DNS) by transit networks extremely hard. In this work, we investigate whether DoH traffic is indeed indistinguishable from encrypted Web traffic. To this end, we collect several DoH traffic traces corresponding to 25 resolvers (including major ones, e.g., Google and Cloudftare) by visiting thousands of domains in Alexa's list of top-ranked websites at different geographical locations and environments. Based on the collected traffic, we train a machine learning model to classify HTTPS traffic as either Web or DoH. With our DoH identification model in place, we show that an authoritarian ISP can identify {$\sim$}97.4\% ({$\sim$}90\%) of the DoH packets correctly in a closed-world (open-world) setting while only misclassifying 1 in 10,000 Web packets. To counter this DoH identification model, we propose an effective mitigation technique, making the identification model impractical for ISPs to filter and consequently downgrade DoH to plain-text DNS communications.},
  keywords = {DNS,DoH,Information filters,machine learning,Machine learning,privacy,Privacy,Protocols,Rendering (computer graphics),Surveillance,Virtual assistants},
  file = {/home/adithya/Zotero/storage/ZJPLVDTU/Csikor et al. - 2021 - Privacy of DNS-over-HTTPS Requiem for a Dream.pdf;/home/adithya/Zotero/storage/WUAR37ZR/9581227.html}
}

@inproceedings{dataDefenseARPSpoofing2018,
  title = {The {{Defense Against ARP Spoofing Attack Using Semi-Static ARP Cache Table}}},
  booktitle = {2018 {{International Conference}} on {{Sustainable Information Engineering}} and {{Technology}} ({{SIET}})},
  author = {Data, Mahendra},
  year = {2018},
  month = nov,
  pages = {206--210},
  doi = {10.1109/SIET.2018.8693155},
  urldate = {2024-11-22},
  abstract = {Securing the user's data that pass through the internet is a very important challenge until today. One of the threats is the attacks on the data link layer such as ARP spoofing. Those attacks exploit the vulnerability of the ARP protocol. One of the most basic but effective solution to mitigate this type of attack is adding MAC and IP address to the static ARP cache table manually. However, this solution is a laborious job and not all network administrator willing to do it. This research proposed a method to improve the static ARP cache table solution. Our purposes are removing the laborious process of adding the static ARP cache table manually and adding the ARP validation function to manage the static ARP cache table automatically. This proposed method is simple and compatible with standard ARP protocol. It does not require any modification of the standard ARP protocol nor replacing old devices. We successfully proved the effectiveness of our proposed method. Our proposed method can protect the hosts against all type of ARP spoofing attacks.},
  keywords = {ARP,cache,MiTM,spoofing,static},
  file = {/home/adithya/Zotero/storage/CKQFZTRG/8693155.html}
}

@misc{ehartDnsmasqLightweightVersatile,
  title = {Dnsmasq -  a Lightweight and Versatile Software That Provides {{DNS}}, {{DHCP}}, Router Advertisement and Network Boot for Small Networks},
  author = {Ehart, Norbert}
}

@misc{geraldcombsWiresharkFreeOpen,
  title = {Wireshark - {{A}} Free and Open Source Packet Analyzer},
  author = {{Gerald Combs}}
}

@inproceedings{majidhafathimaSurveyNetworkPacket2021,
  title = {A {{Survey On Network Packet Inspection And ARP Poisoning Using Wireshark And Ettercap}}},
  booktitle = {2021 {{International Conference}} on {{Artificial Intelligence}} and {{Smart Systems}} ({{ICAIS}})},
  author = {Majidha Fathima, K M and Santhiyakumari, N.},
  year = {2021},
  month = mar,
  pages = {1136--1141},
  doi = {10.1109/ICAIS50930.2021.9395852},
  urldate = {2024-11-21},
  abstract = {A network consists of a collection of nodes such as hubs, bridges, switches, routers, firewalls, brouters, packet shapers. The hubs help in connecting two devices. The bridges and switches function in layer 2 of ISO-OSI (Open Systems Interconnection). Routers perform the role of delivering packets from source to destination. Firewalls protect the networks by filtering the traffic between sender and receiver. The packet shapers help in regulating the traffic by cutting out spikes in a connectivity. The network is being utilized as 24*7 days support. The network is being exposed to various kinds of attacks such as ARP (Address Resolution Protocol), DDOS (Distributed Denial of Service). Hence the performance monitoring plays a vital role in preserving a network. The tools such as wireshark and ettercap are being analyzed in this paper. The network traffic is being interpreted by wireshark. Ettercap analyzes ARP poisoning attack. The preventive actions are taken based on the output of the monitoring tools.},
  keywords = {ARP,Bridges,Computer crime,DDOS,Firewalls (computing),ISO-OSI,Monitoring,Receivers,Telecommunication traffic,Tools},
  file = {/home/adithya/Zotero/storage/JTJ3L8NZ/9395852.html}
}

@inproceedings{maksutovDetectionPreventionDNS2017,
  title = {Detection and Prevention of {{DNS}} Spoofing Attacks},
  booktitle = {2017 {{Siberian Symposium}} on {{Data Science}} and {{Engineering}} ({{SSDSE}})},
  author = {Maksutov, Artem A. and Cherepanov, Ilya A. and Alekseev, Maksim S.},
  year = {2017},
  month = apr,
  pages = {84--87},
  doi = {10.1109/SSDSE.2017.8071970},
  urldate = {2024-11-24},
  abstract = {One of the modern MitM-attacks on HTTPS is attacks using SSLstrip and SSLstrip+ utilities, the latter of which uses a DNS-spoofing type attack. Currently, there are several ways to protect against replacing DNS responses, but there is no available and simple tool for detecting a DNS-spoofing attack. The utility designed for this is called DNSwitch and was described in this article.},
  keywords = {Browsers,Computer security,DNS-spoofing,Internet,IP networks,MitM,Protocols,Servers,SSLstrip},
  file = {/home/adithya/Zotero/storage/XKK7XJ6Z/8071970.html}
}

@misc{oracleVirtualBoxGeneralpurposeFull,
  title = {{{VirtualBox}} - a General-Purpose Full Virtualization Software for X86\_64 Hardware},
  author = {{Oracle}}
}

@misc{ornaghiEttercapComprehensiveSuite,
  title = {Ettercap - a Comprehensive Suite for Man in the Middle Attacks},
  author = {Ornaghi, Alberto and {Marco Valleri}}
}

@book{purdyLinuxIptablesPocket2004,
  title = {Linux Iptables {{Pocket Reference}}: {{Firewalls}}, {{NAT}} \& {{Accounting}}},
  shorttitle = {Linux Iptables {{Pocket Reference}}},
  author = {Purdy, Gregor N.},
  year = {2004},
  month = aug,
  publisher = {"O'Reilly Media, Inc."},
  abstract = {Firewalls, Network Address Translation (NAT), network logging and accounting are all provided by Linux's Netfilter system, also known by the name of the command used to administer it, iptables. The iptables interface is the most sophisticated ever offered onLinux and makes Linux an extremely flexible system for any kind of network filtering you might do. Large sets of filtering rules can be grouped in ways that makes it easy to test them and turn them on and off.Do you watch for all types of ICMP traffic--some of them quite dangerous? Can you take advantage of stateful filtering to simplify the management of TCP connections? Would you like to track how much traffic of various types you get?This pocket reference will help you at those critical moments when someone asks you to open or close a port in a hurry, either to enable some important traffic or to block an attack. The book will keep the subtle syntax straight and help you remember all the values you have to enter in order to be as secure as possible. The book has an introductory section that describes applications,followed by a reference/encyclopaedic section with all the matches and targets arranged alphabetically.},
  googlebooks = {CCk6xpGeYjwC},
  isbn = {978-1-4493-7898-1},
  langid = {english},
  keywords = {Computers / General,Computers / Information Technology,Computers / Operating Systems / General,Computers / Operating Systems / Linux,Computers / Operating Systems / UNIX,Computers / Security / General}
}

@inproceedings{sudhakarSurveyComparativeAnalysis2017,
  title = {A Survey on Comparative Analysis of Tools for the Detection of {{ARP}} Poisoning},
  booktitle = {2017 2nd {{International Conference}} on {{Telecommunication}} and {{Networks}} ({{Tel-NET}})},
  author = {{Sudhakar} and Aggarwal, R. K.},
  year = {2017},
  month = aug,
  pages = {1--6},
  doi = {10.1109/℡-NET.2017.8343546},
  urldate = {2024-11-21},
  abstract = {Giving security to the system in an amenable source has turned into a noteworthy test these days. Information inherited through the system is not thought to be protected. Different dangers like sniffing, phishing, caricaturing exist. This paper exhibits an outline of different system dangers and assaults to the system. There are so many apparatuses in the amenable source and many mitigation techniques which are produced as a way to tackle to these assaults. Devices like Wireshark, arpwatch, firewall has been talked about in this paper.},
  keywords = {ARPWATCH,Electronic mail,Ettercap,IP networks,Man-in-the-Middle-Attack,Password,Postal services,Sniffing,Tools,Wireshark},
  file = {/home/adithya/Zotero/storage/7B3P6855/8343546.html}
}

@inproceedings{trabelsiARPSpoofingComparative2009,
  title = {{{ARP}} Spoofing: A Comparative Study for Education Purposes},
  shorttitle = {{{ARP}} Spoofing},
  booktitle = {2009 {{Information Security Curriculum Development Conference}}},
  author = {Trabelsi, Zouheir and {El-Hajj}, Wassim},
  year = {2009},
  month = sep,
  series = {{{InfoSecCD}} '09},
  pages = {60--66},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1940976.1940989},
  urldate = {2024-11-24},
  abstract = {ARP spoofing attack, one of the most important security topics, is usually taught in courses such as Intrusion Detection in Local Area Networks (LANs). In such a course, hands-on labs are very important as they facilitate students' learning on how to detect ARP spoofing using various types of security solutions, such as intrusion detection and prevention systems (IDS/IPS). The preparation of these hands-on labs are usually the task of Security Instructors who are required to select and use efficient security solutions for their hands-on experiments; the problem that presents itself is that most of these security instructors lack the sufficient hands-on experience and skills. For this reason and because of the diversity of the available security solutions, the security instructors are having much difficulty when selecting the adequate security solutions for their hands-on labs.This paper is a comparative study for educational purpose. It provides analysis based on practical experiments carried out on a number of security solutions regarding their ability to detect ARP spoofing. Our analysis provides means for security instructors to evaluate and select the appropriate security solutions for their hands-on labs. In addition, we clearly show that ARP spoofing has not been given enough attention by most tested security solutions, even though this attack presents a serious threat, is very harmful and more dangerously it is easy to conduct. As a solution, we propose the requirements for an ideal algorithm that can be used by security solutions to detect effectively any ARP spoofing attack.},
  isbn = {978-1-60558-661-8}
}

@inproceedings{trostleProtectingDNSCache2010,
  title = {Protecting against {{DNS}} Cache Poisoning Attacks},
  booktitle = {2010 6th {{IEEE Workshop}} on {{Secure Network Protocols}}},
  author = {Trostle, Jonathan and Van Besien, Bill and Pujari, Ashish},
  year = {2010},
  month = oct,
  pages = {25--30},
  doi = {10.1109/NPSEC.2010.5634454},
  urldate = {2024-11-24},
  abstract = {DNS is vulnerable to cache poisoning attacks, whereby an attacker sends a spoofed reply to its own query. Historically, an attacker only needed to guess a predictable, or more recently, a 16 bit pseudorandom ID in order to be successful. The Kaminsky attack demonstrated successful poisoning attacks that required only 6 seconds on typical networks. Since then, source port randomization (spr) has been used for additional protection. Nevetheless, E. Polyakov demonstrated successful poisoning attacks against spr given a Gigabit network, on the order of 10 hours. Even with slower network speeds, an attack is likely to be successful in a moderate time period. DNSSEC will provide a strong countermeasure to poisoning as well as other attacks against the DNS. However, until DNSSEC is actually deployed, there is a need for additional countermeasures that can be deployed in the near term. In this paper, we describe a new approach that is based on detecting a poisoning attack, then sending an additional request for the same DNS Resource Record. Since the defense is only activated when attacks occur, we expect the performance impact to be minimal. The countermeasure requires no changes to the DNS standards, and only requires modifications to the caching server. Thus it can be deployed incrementally in order to obtain immediate security benefits. We show that our proposed defense makes poisoning attacks substantially more difficult. We have implemented the countermeasure using a local proxy for the BIND caching server, and our tests show that the performance impact is minimal.},
  keywords = {Computer crime,IP networks,Protocols,Servers,Standards,Toxicology},
  file = {/home/adithya/Zotero/storage/5CIXPQXX/5634454.html}
}
