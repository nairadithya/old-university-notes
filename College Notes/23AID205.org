#+TITLE: Software Defined Communication System
#+AUTHOR: Adithya Nair
#+LATEX_HEADER: \input{preamble}
#+LATEX_CLASS: report

* Unit 1
** Convolutions
\begin{definition}[Convolution]
A convolution is an integral that expresses the amount of overlap of one function $f(t)$, as it is shifted over to function $g(t)$, for a continuous time signal.
\[
(f * g)(t) = \int_{-\infty}^{\infty} f(\tau)g(t - \tau) d \tau
\]
\end{definition}
When working with discrete signals, the integral becomes a summation.
So the convolution $Y[h] $
\[
Y[h] = \Sum_{k = -\infty}^{\infty} x(k) h(n-k)
\]
#+begin_src octave :results output
h = [0 1 2 3;2 4 1 3]';
reverse = @(H)[-1*H(:,1) H(:,2)];
timeRH = reverse(h)
#+end_src

#+RESULTS:
: timeRH =
:
:    0   2
:   -1   4
:   -2   1
:   -3   3
:

#+begin_src octave
clc;
clear all;
close all;
% Define the original signal
x = [1 2 3 4];
% Define the time indices for plotting
n = 0:length(x)-1;
n_reversed = -fliplr(n);
% Time-shifted versions
x_n1 = [0 x(1:end-1)]; % Shifting right, padding with 0 at the beginning
x_np1 = [x(2:end) 0]; % Shifting left, padding with 0 at the end
x_neg_n = fliplr(x); % Reversing the sequence
x_neg_np1 = [fliplr(x(2:end)) 0]; % x[-n+1]
% Plotting
subplot(2,2,1); stem(n, x); title('x[n]');
subplot(2,2,2); stem(n, x_n1); title('x[n-1]');
subplot(2,2,3); stem(n, x_np1); title('x[n+1]');
subplot(2,2,4); stem(n_reversed, x_neg_n); title('x[-n]');
% Plot x[-n+1] separately due to different time axis
figure;
stem(n_reversed+1, x_neg_np1); title('x[-n+1]');
#+end_src
** Real Sinusoid
A rotation of two complex sinusoidal signals in opposite directions to each other.
- $V(t)$ with a frequency F shown as solid blue line with $V*(t)$ with frequency -F shown as dashed red line
- The I parts exactly fall on top of each other and hence are the same $cos 2\pi Ft$
- The Q parts carry exactly the same amplitude with opposite signs to each other and hence are $sin 2\pi Ft$ and $-sin 2\pi Ft$

$$|V \cdot V^*| = |V|^2 = V_I^2 + V_q^2$$

It is a combination of two complex signals.
* Lab
** Sampling Theorem
#+begin_src octave :results output
clc;
close all;
clear all;
f1=3;
f2=23;
t=-0.4:0.0001:0.4;
x=sin(2*pi*f1*t)+cos(2*pi*f2*t);
figure(1);
plot(t,x,'-.r');
xlabel('time-----');
ylabel('amp---');
title('The original signal');
%case 1: (fs<2fm)
fs1=1.4*f2;
ts1=1/fs1;
n1=-0.4:ts1:0.4;
xs1=cos(2*pi*f1*n1)+cos(2*pi*f2*n1);
figure(2);
stem(n1,xs1);
hold on;
plot(t,x,'-.r');
hold off;
legend('fs<2fm');
%case 2: (fs=2fm)
fs2=2*f2;
ts2=1/fs2;
n2=-0.4:ts2:0.4;
xs2=cos(2*pi*f1*n2)+cos(2*pi*f2*n2);
figure(3);
stem(n2,xs2);
hold on;
plot(t,x,'-.r');
hold off;
legend('fs=2fm');
%case 3: (fs>2fm)
fs3=7*f2;
ts3=1/fs3;
n3=-0.4:ts3:0.4;
xs3=cos(2*pi*f1*n3)+cos(2*pi*f2*n3);
figure(4);
stem(n3,xs3);
hold on;
plot(t,x,'-.r');
hold off;
legend('fs>2fm');
#+end_src

#+RESULTS:
